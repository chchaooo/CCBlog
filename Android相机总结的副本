
## 0）拍照参数设置

---



### 照片格式

#### 拍照格式

#### 预览格式

* 所有Android设备的相机均支持以下两种格式（要求by google）
    * NV21
    * YV12
    
    相机默认格式为NV21
* 上述两种格式均定义在android.graphics.ImageFormat中。
* YUV：
    * 名词解释
        * Y：luminance 亮度
        * U：色彩
        * V：饱和度
    * 与所熟知的RGB类似，YUV也是一种颜色编码方法，主要用于电视系统。它将亮度信息（Y）与色彩信息（UV）分离，没有UV一样可以显示完整图像，只不过黑白的。这样的设计很好解决了彩色电视机与黑白电视机的兼容问题
* NV21和YV12的区别
    * YV12：将Y、U、V分量分别打包，依次存储。其每一个像素点的YUV数据提取遵循YUV420格式的提取方式，即4个Y分量共用一组UV。
    * NV21：即Y和UV分为两个Plane，但是UV（CbCr）为交错存储，而不是分为三个plane。


---

### 对焦

* 绝大多数相机支持连续自动对焦
* 可以设置具体的对焦点位于预览区域的哪个位置
* 无法设置实际的焦距距离

API中拍照模式定义：
* **FOCUS_MODE_CONTINUOUS_PICTURE** ：Continuous auto focus mode intended for taking pictures.
* **FOCUS_MODE_CONTINUOUS_VIDEO** ：Continuous auto focus mode intended for video recording.
    

    parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
    if (parameters.getSupportedFocusModes().contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {
        parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
    }

### 拍照质量参数

    /* 设置照片质量 */
    Camera.Parameters parameters = mCurCamera.getParameters();
    parameters.setJpegQuality(60);

* 实际测试该动作需要的时间约为300ms
* 拍照质量参数
    * **参数与照片质量和最终的照片大小之间并不呈现线性相关关系，而是超过了某个门槛值之后，发送突变**
    * 对小米note拍照清晰临界点在38左右
        * 拍照质量参数设置为40左右照片大小约为730kb，仍基本保留了原本照片信息
            ![](https://cl.ly/1O1e061x0r2A/40-730kb.jpg)
        * 设置为35时照片大小减小的并不多（640kb），但照片严重模糊，已经不可用。
            ![](https://cl.ly/1K0A3r3I2o3R/30-550kb.jpg)
    * 参数设置为40和70本身对照片大小的影响不是太大（700kb，1000kb），考虑不同设备存在不同情况应该设置稍高一点（60）
    * 参数设置为70和100，照片质量差距肉眼难以分辨，但照片大小差距巨大（1000kb， 4000kb）
    * 拍照参数未设置时，拍照质量的默认值根据照片大小900kb和清晰度推测为60左右

   

* **上述拍照质量的设置与压缩照片的质量是否存在关联性质？**
* **该设置只是对生成的照片生效，获取到的预览帧是与参数无关的？？？**


---

## 2）获取图片

---

#### FUNC 0 : AutoFocusCallback

    mCamera.autoFocus(AutoFocusCallback cb){
        ..
    }

* 只有对焦成功之后回调才会触发（若未成功则不会拍摄照片）

#### FUNC 1 : PictureCallback

    /* from android.hardware */
    Camera.ShutterCallback shutter = new Camera.ShutterCallback() {
        @Override
        public void onShutter() {
            /** Default Action: Camera Sound*/
        }
    };
    
    PictureCallback picListener = new PictureCallback() {
        @Override
        public void onPictureTaken(final byte[] data, Camera camera1) {
            ...
        }
    }
    
    /* ShutterCallback shutter, PictureCallback raw,PictureCallback jpeg */
    public final void takePicture(shutter, picListener, null) {
        ...    
    }


#### FUNC2 :  PreviewCallback

##### 1）setPreviewCallback
    
    PreviewCallback previewCB = new Camera.PreviewCallback() {
        @Override
        public void onPreviewFrame(byte[] data, Camera camera) {
            ...
        }
    }
    mCamera.setPreviewCallback(previewCB);

* 正常情况下一秒钟回传约30帧
* 当连续拍照，手机发热比较严重时，帧率会下降。

##### 2）setPreviewCallbackWithBuffer

* 使用setPreviewCallback来处理帧时，每一针都需要新开辟一个新的buffer来存储帧数据。不断开辟和回收内存，频繁导致GC。

    
    mCamera.setPreviewCallbackWithBuffer(new Camera.PreviewCallback(){
        @Override
        public void onPreviewFrame(byte[] data, Camera camera){
            ...
        }
    }
    mCamera.addCallbackBuffer(
    new byte[((previewWidth * previewHeight) *ImageFormat.getBitsPerPixel(ImageFormat.NV21)) / 8]);

> 当设置setPreviewCallbackWithBuffer(null)之后，之前设置的buffer也被删除；当重新设置回调之后，也需要重新添加buffer。当未设置buffer时，该回调将不会起作用。


---

## 3）压缩

#### 按分辨率压缩/裁剪

    private Bitmap compressPicTo1080(Bitmap picture) throws Exception, Error{
        /* 保证长宽关系，如果宽大于高度，旋转照片 */
        Bitmap picture;
        if (picture.getHeight() < picture.getWidth()) {
            Matrix matrix = new Matrix();
            matrix.postRotate(90.0f);
            picture = Bitmap.createBitmap(picture, 0, 0, picture.getWidth(), picture.getHeight(), matrix, true);
        }else {
            picture = picture;
        }
        if(picture.getHeight() == 1920 && picture.getWidth() == 1080){
            return picture;
        }
        
        /* 调整长宽比例，裁剪照片 */
        int orignHeight = picture.getHeight();
        int orignWidth = picture.getWidth();
        int desWidth = orignHeight * 1080 / 1920;
        int startX = (orignWidth - desWidth) / 2;
        int startY = 0;
        Bitmap picture = Bitmap.createBitmap(picture, startX, startY, desWidth, orignHeight);
        
        /* 保持原比例压缩照片分辨率 */
        float scaleWidth = (float) 1080 / desWidth;
        float scaleHeight = (float) 1920 / orignHeight;
        Matrix matrix = new Matrix();
        matrix.postScale(scaleWidth, scaleHeight);
        Bitmap resizeBitmap = Bitmap.createBitmap(picture, 0, 0, desWidth, orignHeight, matrix, false);
        return resizeBitmap;
    }

    
    

#### 按照片质量压缩

    ByteArrayOutputStream array = new ByteArrayOutputStream();
    array.reset();
    /* 照片信息原本在bitmap中，压缩之后存在于array中 */
    bitmap.compress(Bitmap.CompressFormat.JPEG, 65, array);
    
* **照片质量参数与拍照时设置的拍照质量参数是否效果相同？**
    
---

#### 预览帧的压缩

    /* 数据源头为photoTask.getImageData(),格式为byte[] */
    Size size = mCameraManager.getCamera().getParameters().getPreviewSize();
    final int previewWidth = size.width;
    final int previewHeight = size.height;
    final YuvImage image = new YuvImage(photoTask.getImageData(), ImageFormat.NV21, previewWidth, previewHeight, null);
    ByteArrayOutputStream os = new ByteArrayOutputStream(photoTask.getImageData().length);
    if (!image.compressToJpeg(new Rect(0, 0, previewWidth, previewHeight), 100, os)) {
        return;
    }
    byte[] bytestmp = os.toByteArray();
    Bitmap bmp = BitmapFactory.decodeByteArray(bytestmp, 0, bytestmp.length);

    ByteArrayOutputStream array = new ByteArrayOutputStream();
    array.reset();
    if (bmp == null) {
        return;
    }
    bmp.compress(Bitmap.CompressFormat.JPEG, 65, array);
    Utils.writeToFile(file, array.toByteArray());




---

## 源码

     /**
         * Sets the image format for preview pictures.
         * <p>If this is never called, the default format will be
         * {@link android.graphics.ImageFormat#NV21}, which
         * uses the NV21 encoding format.</p>
         * 
         该方法用于设置预览的格式。默认预览格式为 android.graphics.ImageFormat#NV21
         
         * <p>Use {@link Parameters#getSupportedPreviewFormats} to get a list of
         * the available preview formats.
         可以使用Parameters.getSupportedPreviewFormats来获取支持的预览格式
         
         * <p>It is strongly recommended that either
         * {@link android.graphics.ImageFormat#NV21} or
         * {@link android.graphics.ImageFormat#YV12} is used, since
         * they are supported by all camera devices.</p>
         强烈推荐使用NV21或者是YV12格式，所有AndroidManifest相机设备均支持这两个预览格式
         
         * <p>For YV12, the image buffer that is received is not necessarily
         * tightly packed, as there may be padding at the end of each row of
         * pixel data, as described in
         * {@link android.graphics.ImageFormat#YV12}. For camera callback data,
         * it can be assumed that the stride of the Y and UV data is the
         * smallest possible that meets the alignment requirements. That is, if
         * the preview size is <var>width x height</var>, then the following
         * equations describe the buffer index for the beginning of row
         * <var>y</var> for the Y plane and row <var>c</var> for the U and V
         * planes:
         *
         * {@code
         * <pre>
         * yStride   = (int) ceil(width / 16.0) * 16;
         * uvStride  = (int) ceil( (yStride / 2) / 16.0) * 16;
         * ySize     = yStride * height;
         * uvSize    = uvStride * height / 2;
         * yRowIndex = yStride * y;
         * uRowIndex = ySize + uvSize + uvStride * c;
         * vRowIndex = ySize + uvStride * c;
         * size      = ySize + uvSize * 2;</pre>
         * }
         *
         * @param pixel_format the desired preview picture format, defined by
         *   one of the {@link android.graphics.ImageFormat} constants.  (E.g.,
         *   <var>ImageFormat.NV21</var> (default), or
         *   <var>ImageFormat.YV12</var>)
         *
         * @see android.graphics.ImageFormat
         * @see android.hardware.Camera.Parameters#getSupportedPreviewFormats
         */
        public void setPreviewFormat(int pixel_format) {
            ...
        }
        
    




---

### 其他

#### 获取本地图片

    /**
     * 读取图片
     * @param reqWidth  所需图片压缩尺寸最小宽度
     * @param reqHeight 所需图片压缩尺寸最小高度
     */
    public static Bitmap decodeSampledBitmapFromFile(String filepath,int reqWidth, int reqHeight) {
    
        /* 获取本地图片分辨率，而并不加载 */
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(filepath, options);
        
        /* 按照目标长宽来计算压缩比例 */
        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
        
        /* 实际加载图片 */
        options.inJustDecodeBounds = false;
        return BitmapFactory.decodeFile(filepath, options);
    }
